class Solution {
  public:
    // Function to build the tree from given inorder and preorder traversals
    Node *buildTree(vector<int> &inorder, vector<int> &preorder) {
        // code here
        map<int, int>inMap;
        for(int i=0; i<inorder.size(); i++){
            inMap[inorder[i]]=i;
        }
        return getBuildTree(inorder, 0, inorder.size()-1, preorder, 0, preorder.size()-1, inMap);
    }
    
    Node *getBuildTree(vector<int> &inorder, int inStart, int inEnd, vector<int>&preorder, int preStart, int preEnd, map<int, int>&inMap){
        if(inStart > inEnd || preStart > preEnd){
            return NULL;
        }
        Node *root = new Node(preorder[preStart]);
        
        int inRoot = inMap[root->data];
        int leftNums = inRoot - inStart;
        
        root->left = getBuildTree(inorder, inStart, inRoot-1, preorder, preStart+1, preStart+leftNums, inMap);
        root->right = getBuildTree(inorder, inRoot+1, inEnd, preorder, preStart+leftNums+1, preEnd, inMap);
        
        return root;
    }
};
