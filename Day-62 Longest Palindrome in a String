//MEMOIZATION

class Solution {
  public:
  bool isPalindrome(string &s, int i, int j, vector<vector<int>> &memo){
      if(i == j) return true;  // Single character is a palindrome
      if(i > j) return true;   // Empty substring is a palindrome
      if(memo[i][j] != -1) return memo[i][j]; // Return precomputed value

      if(s[i] != s[j]) return memo[i][j] = 0; // Not a palindrome

      return memo[i][j] = isPalindrome(s, i+1, j-1, memo) ? 1 : 0;
  }

  string longestPalindrome(string &s) {
      int n = s.size();
      string ans = "";
      vector<vector<int>> memo(n, vector<int>(n, -1));

      for(int i = 0; i < n; i++){
          for(int j = i; j < n; j++){ 
              if(isPalindrome(s, i, j, memo)){
                  if((j - i + 1) > ans.size()){
                      ans = s.substr(i, j - i + 1);
                  }
              }
          }
      }
      return ans;
  }
};


//DP

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        int count = 0;
        string ans="";
        vector<vector<bool>>dp(n, vector<bool>(n, false));
        for(int l=1; l<=n; l++){
            for(int i=0; i+l-1<n; i++){
                int j = i+l-1;
                if(i==j) dp[i][j] = true;
                else if(i+1 == j) dp[i][j] = (s[i]==s[j]);
                else{
                    dp[i][j] = ((s[i]==s[j]) && dp[i+1][j-1]);
                }
                if(dp[i][j]==true){
                    if(ans.size()<(l)){
                        ans = s.substr(i, l);
                    }
                }
            }
        }
        return ans;
    }
};
