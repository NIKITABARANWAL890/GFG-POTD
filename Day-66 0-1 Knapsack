Mmeoization:
class Solution {
  public:
  int knapsackHelper(int w, int ind, vector<int>&wt, vector<int>&val, vector<vector<int>>&memo){
      if(ind==0){
          if(wt[ind]<=w) return val[0];
          else return 0;
      }
      if(memo[ind][w]!=-1) return memo[ind][w];
      int skip = knapsackHelper(w, ind-1, wt, val, memo);
      int steal = INT_MIN;
      if(wt[ind]<=w){
          steal = val[ind] + knapsackHelper(w-wt[ind], ind-1, wt, val, memo);
      }
      return memo[ind][w] = max(skip, steal);
  }
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
        int n = wt.size();
        vector<vector<int>>memo(n, vector<int>(n+1, -1));
        return knapsackHelper(W, wt.size()-1, wt, val, memo);
    }
};


DP:
class Solution {
public:
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        int n = wt.size();
        vector<vector<int>> dp(n, vector<int>(W + 1, 0));

        // Base case: first row (using only the first item)
        for (int w = 0; w <= W; w++) {
            if (wt[0] <= w) dp[0][w] = val[0];
        }

        // Filling DP table
        for (int i = 1; i < n; i++) {
            for (int w = 0; w <= W; w++) {
                int skip = dp[i - 1][w]; // Not taking the current item
                int steal = (wt[i] <= w) ? val[i] + dp[i - 1][w - wt[i]] : 0;
                dp[i][w] = max(skip, steal);
            }
        }

        return dp[n - 1][W]; // The answer is stored at dp[n-1][W]
    }
};
